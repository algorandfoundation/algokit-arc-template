# {{ project_name }}

This project has been generated using AlgoKit. See below for default getting started instructions.

# Getting started

## Adding Images

To add images to your collection, simply place them in the `asas/nfts/Collection/Images/` folder.

## Updating Metadata
To update the metadata for your NFT collection, edit the `asas/nfts/metadata.json` file. This file contains information such as the name, description, and image for each NFT.
>Eg for one NFT:
```
[
    {
        "name": "ALGO 1", 
        "description": "Stars", 
        "image": "ALGO_1.png",  <---- this should match the name of a picture inside Images/
        "properties":{
            "author": "Stephane",
            "traits": {
                "position": "center",
                "colors": 4
            }
        }
    }
]
```

## Creating Immutable NFTs

To create an immutable NFT (ARC-3), run the following command:

```console
python python -m asas immutable 
```

## Creating Mutable NFTs

To create an immutable NFT (ARC-3 + ARC-19), run the following command:

```console
python python -m asas mutable 
```


# Tools

This project makes use of Python to build ASAs on Algorand. The following tools are in use:

- [Algorand](https://www.algorand.com/) - Layer 1 Blockchain; [Developer portal](https://developer.algorand.org/), [Why Algorand?](https://developer.algorand.org/docs/get-started/basics/why_algorand/)
- [AlgoKit](https://github.com/algorandfoundation/algokit-cli) - One-stop shop tool for developers building on the Algorand network; [docs](https://github.com/algorandfoundation/algokit-cli/blob/main/docs/algokit.md), [intro tutorial](https://github.com/algorandfoundation/algokit-cli/blob/main/docs/tutorials/intro.md)
- [Beaker](https://github.com/algorand-devrel/beaker) - Smart contract development framework for PyTeal; [docs](https://beaker.algo.xyz), [examples](https://github.com/algorand-devrel/beaker/tree/master/examples)
- [PyTEAL](https://github.com/algorand/pyteal) - Python language binding for Algorand smart contracts; [docs](https://pyteal.readthedocs.io/en/stable/)
- [AlgoKit Utils]({% if deployment_language == "typescript" %}https://github.com/algorandfoundation/algokit-utils-ts{% else %}https://github.com/algorandfoundation/algokit-utils-py{% endif %}) - A set of core Algorand utilities that make it easier to build solutions on Algorand.
- [Poetry](https://python-poetry.org/): Python packaging and dependency management.
{%- if use_python_black -%}
- [Black](https://github.com/psf/black): A Python code formatter.
{% endif %}
{%- if python_linter == "ruff" -%}
- [Ruff](https://github.com/charliermarsh/ruff): An extremely fast Python linter.
{% endif %}
{%- if python_linter == "flake8" -%}
- [Flake8](https://flake8.pycqa.org/en/latest/): A Python linter for style guide enforcement.
{% endif %}
- [mypy](https://mypy-lang.org/): Static type checker.
{%- if deployment_language == "typescript" %}
- [npm](https://www.npmjs.com/): Node.js package manager
- [TypeScript](https://www.typescriptlang.org/): Strongly typed programming language that builds on JavaScript
- [ts-node-dev](https://github.com/wclr/ts-node-dev): TypeScript development execution environment
{% endif -%}

It has also been configured to have a productive dev experience out of the box in VS Code, see the [.vscode](./.vscode) folder.

